plugins {
  id 'java-library'

  // To create a fat jar build/libs/bcel-util-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '6.0.0'

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id 'com.github.sherter.google-java-format' version '0.7.1'

  // Error Prone linter
  id("net.ltgt.errorprone") version "1.2.1"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.5.10'

  // To show task list as a tree, run: ./gradlew <taskname> taskTree
  id 'com.dorongold.task-tree' version '1.5'
}

repositories {
  mavenCentral()
}

dependencies {
  api group: 'org.checkerframework.annotatedlib', name: 'bcel', version: '6.4.1.1'
  // For a locally-built commons-bcel, set $BCEL and use this line instead of the above.
  // implementation fileTree(dir: "$System.env.BCEL/target", include: 'bcel-6.2.0.2.jar')

  implementation 'org.plumelib:reflection-util:1.0.1'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

task compileAll() {
  dependsOn compileJava
  dependsOn compileTestJava
}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
    excludeEngines 'junit-vintage'
  }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.4.0")
  // JDK 8 support for Error Prone:
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all" << "-Werror"
  options.errorprone {
    disable("ReferenceEquality") // Use Interning Checker instead.
    // Code copied from BCEL that we don't want to change gratuitously.
    excludedPaths = ".*/org/plumelib/bcelutil/StackVer.java"
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    // TODO: 'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-Xlint:-processing', // because of Error Prone's "No processor claimed any of these annotations"
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions'
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
    checkerFrameworkAnnotatedJDK files(cfHome + "/checker/dist/jdk8.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  exclude 'org/plumelib/bcelutil/StackVer.java'
  options.with {
    linksOffline 'https://docs.oracle.com/javase/8/docs/api/', 'https://docs.oracle.com/javase/8/docs/api/'
    // this works locally but not on Travis?
    //linksOffline 'https://commons.apache.org/proper/commons-bcel/apidocs/', 'https://commons.apache.org/proper/commons-bcel/apidocs/'
  }
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.0"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  main = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc


/// Git hooks

task installGitHooks(type: Copy) {
  description 'Copies git hooks to .git directory'
  from 'githooks'
  into '.git/hooks'
}

tasks.withType(JavaCompile) {
  dependsOn(':installGitHooks')
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
