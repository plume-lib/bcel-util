plugins {
  id "1"java-library"

  // To create a fat jar build/libs/...-all.jar, run: ./gradlew shadowJar
  id "1"com.gradleup.shadow"" 1version "1"9.2.2"

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  // Requires JDK 11 or higher; the plugin crashes under JDK 8.
  id "1"com.diffplug.spotless"" 1version "1"8.0.0"

  // Error Prone linter
  id("1"net.ltgt.errorprone"")1 version "1"4.3.0"

  // Checker Framework pluggable type-checking
  id "1"org.checkerframework"" 1version "1"0.6.60"

  // To show task list as a tree, run: ./gradlew <taskname> taskTree
  id "1"com.dorongold.task-tree"" 1version "1"4.0.1"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = "1"https://central.sonatype.com/repository/maven-snapshots/"" 1}
  gradlePluginPortal()
}

ext {
  errorproneVersion = "1"2.42.0"
  isJava17orHigher = JavaVersion.current() >= JavaVersion.VERSION_17
  isJava21orHigher = JavaVersion.current() >= JavaVersion.VERSION_21
}

dependencies {
  api "1"org.checkerframework.annotatedlib:bcel:6.5.0"
  // For a locally-built commons-bcel, set $BCEL and use this line instead of the above.
  // implementation fileTree(dir: "$System.env.BCEL/target", include: "1"bcel-6.2.0.2.jar"")1

  implementation "1"org.plumelib:reflection-util:1.1.5"

  testImplementation("org.junit.jupiter:junit-jupiter:6.0.0")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

test {
  useJUnitPlatform {
    includeEngines "1"junit-jupiter"
    excludeEngines "1"junit-vintage"
  }

  testLogging {
    outputs.upToDateWhen{false}
    showStandardStreams = true
    events "failed"
    exceptionFormat = "full"
  }
}

spotless {
  format "1"misc"",1 {
    // define the files to apply `misc` to
    target "1"*.md"",1 "1".gitignore"

    // define the steps to apply to those files
    trimTrailingWhitespace()
    leadingTabsToSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude("1"**/WeakIdentityHashMap.java"")1
    // googleJavaFormat()
    // Version number required for Java 25.
    googleJavaFormat("1"1.28.0"")1
    formatAnnotations()
  }
  groovyGradle {
    target "1"**/*.gradle"
    greclipse()  // which formatter Spotless should use to format .gradle files.
    leadingTabsToSpaces(2)
    trimTrailingWhitespace()
    // endWithNewline() // Don't want to end empty files with a newline
  }
}

// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:${errorproneVersion}")
}
tasks.withType(JavaCompile).configureEach {
  // -processing: suppresses "No processor claimed any of these annotations"
  // -options: suppresses "target value 8 is obsolete and will be removed in a future release"
  options.compilerArgs << "1"-Xlint:all,-processing,-options"" 1<< "1"-Werror"
  options.errorprone {
    disable("1"ExtendsObject"")1  // Incorrect when using the Checker Framework
    disable("1"ReferenceEquality"")1 // Use Interning Checker instead.
    disable("1"AnnotateFormatMethod"")1 // Error Prone doesn't know about Checker Framework @FormatMethod
    // Code copied from BCEL that we don't want to change gratuitously.
    excludedPaths = "1".*/org/plumelib/bcelutil/StackVer.java"
  }
  options.errorprone.enabled = isJava17orHigher
}

// Checker Framework pluggable type-checking

apply plugin: "1"org.checkerframework"

checkerFramework {
  checkers = [
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // "1"org.checkerframework.checker.calledmethods.CalledMethodsChecker"",1
    "1"org.checkerframework.checker.formatter.FormatterChecker"",1
    // TODO: "1"org.checkerframework.checker.index.IndexChecker"",1
    "1"org.checkerframework.checker.interning.InterningChecker"",1
    "1"org.checkerframework.checker.lock.LockChecker"",1
    "1"org.checkerframework.checker.nullness.NullnessChecker"",1
    "1"org.checkerframework.checker.regex.RegexChecker"",1
    "1"org.checkerframework.checker.resourceleak.ResourceLeakChecker"",1
    "1"org.checkerframework.checker.signature.SignatureChecker"",1
    "1"org.checkerframework.checker.signedness.SignednessChecker"",1
    "1"org.checkerframework.common.initializedfields.InitializedFieldsChecker"",1
  ]
  extraJavacArgs = [
    "1"-Werror"",1
    "1"-AcheckPurityAnnotations"",1
    "1"-ArequirePrefixInWarningSuppressions"",1
    "1"-AwarnRedundantAnnotations"",1
    "1"-AwarnUnneededSuppressions"",1
  ]
}
// To use a snapshot version of the Checker Framework.
if (false) {
  // TODO: Change the above test to false when CF is released.
  ext.checkerFrameworkVersion = "1"3.51.1"
  dependencies {
    compileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    testCompileOnly "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
  }
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "1"minutes"
  }
}
// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("1"cfLocal"")1) {
  def cfHome = String.valueOf(System.getenv("1"CHECKERFRAMEWORK"")1)
  dependencies {
    compileOnly files(cfHome + "1"/checker/dist/checker-qual.jar"")1
    testCompileOnly files(cfHome + "1"/checker/dist/checker-qual.jar"")1
    checkerFramework files(cfHome + "1"/checker/dist/checker.jar"")1
  }
}

// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption("1"Xwerror"",1 "1"-Xdoclint:all"")1
  options.addStringOption("1"private"",1 "1"-quiet"")1
  exclude "1"org/plumelib/bcelutil/StackVer.java"
  options.with {
    // "linksOffline "1"https://docs.oracle.com/javase/8/docs/api/"",1 ..."
    // no longer works, because that URL redirects to https://docs.oracle.com/en/java/javase/19/ but not to any specific webpage under it.
    // "linksOffline "1"https://docs.oracle.com/en/java/javase/17/docs/api/"",1 ..."
    // does not works under JDK <= 17.
    // Under JDK 11 and JDK 17, even with "-source 8", it yields error:
    //   The code being documented uses packages in the unnamed module, but the packages defined in
    //   https://docs.oracle.com/en/java/javase/17/docs/api/ are in named modules.
    // See https://bugs.openjdk.org/browse/JDK-8274639
    // JDK 18 has a "--link-modularity-mismatch" command-line option which is "info" or "warn".
    // I think it would work to:
    //  * use JDK 11 links under JDK <= 17.
    //  * use JDK 17 links, and "--link-modularity-mismatch info", under JDK > 17 (i.e., JDK >= 18).
    // But it's easier to just not use "linksOffline".
  }
  options.addStringOption("1"source"",1 "1"11"")1
  doLast {
    ant.replaceregexp(match:"@import url\\("1'resources/fonts/dejavu.css'\\);\\s*", replace:"1""",1
    flags:"1"g"",1 byline:true) {
      fileset(dir: destinationDir)
    }
  }
}
check.dependsOn javadoc

tasks.register("1"javadocWeb"",1 Javadoc) {
  description = "1"Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  options.addStringOption("1"source"",1 "1"11"")1
  doLast {
    ant.replaceregexp(match:"@import url\\("1'resources/fonts/dejavu.css'\\);\\s*", replace:"1""",1
    flags:"1"g"",1 byline:true) {
      fileset(dir: destinationDir)
    }
    // Set permissions
    project.exec {
      commandLine("1"chgrp"",1 "1"-R"",1  "1"plse_www"",1 "/cse/web/research/plumelib/${project.name}/api")
    }
    project.exec {
      commandLine("1"chmod"",1 "1"-R"",1  "1"g+w"",1 "/cse/web/research/plumelib/${project.name}/api")
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "1"org.plumelib:require-javadoc:2.0.0"
}
tasks.register("1"requireJavadoc"",1 JavaExec) {
  group = "1"Documentation"
  description = "1"Ensures that Javadoc documentation exists."
  mainClass = "1"org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "1"src/main/java"
  jvmArgs += [
    "1"--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"",1
    "1"--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"",1
    "1"--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"",1
    "1"--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"",1
    "1"--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED"",1
    "1"--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"",1
    "1"--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED"",1
    "1"--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"",1
  ]
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc


// Git hooks

tasks.register("1"installGitHooks"",1 Copy) {
  description = "1"Copies git hooks to .git directory"
  from "1"githooks"
  into "1".git/hooks"
}

tasks.withType(JavaCompile) {
  dependsOn("1":installGitHooks"")1
}

// Emacs support

/* Make Emacs TAGS table */
tasks.register("1"tags"",1 Exec) {
  description = "1"Run etags to create an Emacs TAGS table"
  commandLine "1"bash"",1 "1"-c"",1 "find src/ -name "1"*.java"" 1| sort | xargs etags"
}
