plugins {
  id 'java-library'

  // To create a fat jar build/libs/bcel-util-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '7.1.2'

  // Code formatting; defines targets "spotlessApply" and "spotlessCheck"
  id "com.diffplug.spotless" version "6.11.0"

  // Error Prone linter
  id("net.ltgt.errorprone") version "3.0.1"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.6.18'

  // To show task list as a tree, run: ./gradlew <taskname> taskTree
  id 'com.dorongold.task-tree' version '2.1.0'
}

repositories {
  mavenCentral()
}

dependencies {
  api group: 'org.checkerframework.annotatedlib', name: 'bcel', version: '6.5.0'
  // For a locally-built commons-bcel, set $BCEL and use this line instead of the above.
  // implementation fileTree(dir: "$System.env.BCEL/target", include: 'bcel-6.2.0.2.jar')

  implementation 'org.plumelib:reflection-util:1.0.5'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// To upload to Maven Central, see instructions in the file.
apply from: "${buildscript.sourceFile.parent}/gradle/mavencentral.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

task compileAll() {
  dependsOn compileJava
  dependsOn compileTestJava
}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
    excludeEngines 'junit-vintage'
  }
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  java {
    targetExclude("**/WeakIdentityHashMap.java")
    googleJavaFormat()
    formatAnnotations()
  }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.16")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all" << "-Werror"
  options.errorprone {
    enabled = JavaVersion.current() != JavaVersion.VERSION_1_8
    disable("ReferenceEquality") // Use Interning Checker instead.
    disable("InlineMeSuggester") // I don't use tools to inline into clients
    // Code copied from BCEL that we don't want to change gratuitously.
    excludedPaths = ".*/org/plumelib/bcelutil/StackVer.java"
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    // TODO: 'org.checkerframework.checker.index.IndexChecker',
    // No need to run CalledMethodsChecker, because ResourceLeakChecker does so.
    // 'org.checkerframework.checker.calledmethods.CalledMethodsChecker',
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.checker.signedness.SignednessChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker',
  ]
  extraJavacArgs = [
    '-Werror',
    '-Xlint:-processing', // because of Error Prone's "No processor claimed any of these annotations"
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions',
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  exclude 'org/plumelib/bcelutil/StackVer.java'
  options.with {
    // "linksOffline 'https://docs.oracle.com/javase/8/docs/api/', ..."
    // no longer works, because that URL redirects to https://docs.oracle.com/en/java/javase/19/ but not to any specific webpage under it.
    // "linksOffline 'https://docs.oracle.com/en/java/javase/17/docs/api/', ..."
    // does not works under JDK <= 17.
    // Under JDK 11 and JDK 17, even with "-source 8", it yields error:
    //   The code being documented uses packages in the unnamed module, but the packages defined in
    //   https://docs.oracle.com/en/java/javase/17/docs/api/ are in named modules.
    // See https://bugs.openjdk.org/browse/JDK-8274639
    // JDK 18 has a "--link-modularity-mismatch" command-line option which is "info" or "warn".
    // I think it would work to:
    //  *   use JDK 8 links under JDK <= 17.
    //  * use JDK 17 links, and "--link-modularity-mismatch info", under JDK > 17 (i.e., JDK >= 18).
    // But it's easier to just not use "linksOffline".
  }
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
        flags:'g', byline:true) {
        fileset(dir: destinationDir)
      }
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description "Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
    options.addStringOption('source', '8')
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
        flags:'g', byline:true) {
        fileset(dir: destinationDir)
      }
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.5"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc


/// Git hooks

task installGitHooks(type: Copy) {
  description 'Copies git hooks to .git directory'
  from 'githooks'
  into '.git/hooks'
}

tasks.withType(JavaCompile) {
  dependsOn(':installGitHooks')
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
