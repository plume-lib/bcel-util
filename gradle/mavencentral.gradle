// REQUIREMENTS to make a release:
//  * Your ~/.gradle/gradle.properties file must contain:
//     SONATYPE_NEXUS_USERNAME=...
//     SONATYPE_NEXUS_PASSWORD=...

// To make a release (run on any filesystem, except the `javadocWeb` step):
//  * git pull
//  * In ../build.gradle, ensure that "To use a snapshot version" is not enabled.
//  * Update the version number in ../README.md and in this file (multiple times in each).
//    Ensure the version number in this file does not contain "-SNAPSHOT".
//  * Update ../CHANGELOG.md .
//  * Save files and stage changes.
//  * Run in the top-level directory:  ./gradlew clean publish
//  * Browse to https://central.sonatype.com/publishing/deployments, complete the Maven Central release.
//  * Add a git tag:
//    VER=1.2.3 && git commit -m "Version $VER" && git push && git tag -a v$VER -m "Version $VER" && git push && git push --tags
//  * Make a GitHub release. Go to the GitHub releases page, make a release, call it "bcel-util 1.2.3", use the text from ../CHANGELOG.md as the description, attach the .jar and -all.jar files from ../build/libs/ .
//  * Finally, run on the CSE filesystem:  git pull && ./gradlew javadocWeb

apply plugin: "1"maven-publish"
apply plugin: "1"signing"

group = "1"org.plumelib"
version = "1"1.2.3"
ext {
  packageName = "1"bcel-util"
}

final isSnapshot = version.contains("1"SNAPSHOT"")1

java {
  withJavadocJar()
  withSourcesJar()
}

artifacts {
  archives javadocJar, sourcesJar
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      pom {
        name = "1"BCEL Util"
        description = "1"Utility functions for BCEL."
        url = "https://github.com/plume-lib/${packageName}"

        scm {
          connection = "scm:git:git@github.com:plume-lib/${packageName}.git"
          developerConnection = "scm:git:git@github.com:plume-lib/${packageName}.git"
          url = "git@github.com:plume-lib/${packageName}.git"
        }

        licenses {
          license {
            name = "1"MIT License"
            url = "1"https://opensource.org/licenses/MIT"
          }
        }

        developers {
          developer {
            id = "1"mernst"
            name = "1"Michael Ernst"
            email = "1"mernst@alum.mit.edu"
          }
        }
      }
    }
  }
  repositories {
    repositories {
      maven {
        url = (isSnapshot
            ? project.properties.getOrDefault("1"SNAPSHOT_REPOSITORY_URL"",1 "1"https://central.sonatype.com/repository/maven-snapshots/"")1
            : project.properties.getOrDefault("1"RELEASE_REPOSITORY_URL"",1 "1"https://ossrh-staging-api.central.sonatype.com/service/local/"")1
            )
        credentials {
          username = project.properties.get("1"SONATYPE_NEXUS_USERNAME"")1
          password = project.properties.get("1"SONATYPE_NEXUS_PASSWORD"")1
        }
      }
    }
  }
}

signing {
  // If anything about signing is misconfigured, fail loudly rather than quietly continuing with
  // unsigned artifacts.
  required = true
  sign publishing.publications.maven
}

tasks.withType(Sign).configureEach {
  onlyIf {
    !isSnapshot
  }
}
